Сервис Complex-app - рассчет чисел Фибоначчи.
Состоит из 6'ти компонентов:
1. Сlient - веб клиент, передащий числа на обработку и запрашивающий результат в API.
2. Server - то самое API. Сохраняет переданное клиентом значение в Redis и PostgreSQL.
3. Worker - обработчик чисел, слушающий Redis на предмет новых публикаций и сохраняющий для них рассчитанное значение.
4. Nginx - серверное ПО, обеспечивающее раутинг входящих запросов на Client и API (Server), соответственно.
5. PostgreSQL
6. Redis
Каждый компонент кроме Redis и PostgreSQL представлен в своей отдельной папке.
Каждая папка компонента содержит production и development Dockerfile, а так же, иногда, их вспомогательные файлы.
Для поднятия всего проекта целиком в development режиме используется "docker-compose.yml".

Проект лежит в репозитории на GitHub.
TravisCI настроен на прослушивание репозитория проекта. При пуше выполняет инструкии из файла ".travis.yml".
TravisCI собирает development версию клиента для прогонки тестов и если все удачно, то:
1. создает production образы
2. загружает их на Dockerhub, откуда образы будут взяты AWS
3.
На AWS настроен следующий стэк сервисов:
1. Elastic Beanstalk - сервис хостинга проекта. Включена опция 'multi-container' для работы нескольких контейнеров.
2. Relative Database Storage (RDS) - сервис базы данных. Позволяет развернуть PostgreSQL без доп контейнера.
3. ElastiCache - сервис базы данных. Позволяет развернуть Redis без доп контейнера.
4. Identity and Access Management (IAM) - сервис доступа к аккаунту AWS через API.
4.1. Созданы ключи на полный доступ к Beanstalk и записаны в переменные окружения TravisCI.
Все эти сервисы созданы на одном сервере (us-east-2), а потому располагаются в единой сети Virtual Private Cloud (VPS).
Для VPS создана Security Group с правилом, разрешающим входящий трафик TCP для портов Redis и PostgreSQL.
Эта Security Group привязана ко всем 3'ем сервисам, чтобы проект имел к ним доступ.

Значения переменных окружения, используемых в проекте, были записаны в через раздел Software у сервиса Elastic Beanstalk.


настроен на multi-container проект.
"Dockerrun.aws.json" - файл, описывающий порядок развертывания к
